- elixir code:

defcontract do
    prop "device_type" "light_controller"
    prop "description" "Light controller"
    prop "human_name" "Lamp in living room"
    subcontract "controls" do   # syntax sugar for prop "controls" (defcontract do ...
        prop "description" "controls"
        subcontract "lightness" do
            prop "description" "Lightness"
            method "get" type{() -> int} do
                return foo
            end
            method "set" type{(int) -> ()} %{min: 0, max: 65535} do
                do stuff
            end
            method "subscribe" type{() -> chan<int>} do
                return newchan bla
            end
        end
    end
end

- todo:
    - fix cache subscribe() to work for dead targets
        - use a timeout

    - implement pestering call in cache
        - user calls pester(root, [foo, bar, baz], arg, fun)
        - contracts of foo, bar and baz are attached and baz is called
        - fun is called with the result from baz
        - easily implemented by using subscribe

    - implement persistent call
        - that would be a one liner using the pestering call and recursive fun

    - better death support for channels
        - subscribe_link
        - way to notify subscribers when channel dies
        - some sort of one-way link (way to kill subscriber when channel dies but
          not kill channel when subscriber dies)
        - go through code and see which uses of Channel.start_link are legit
            - some channels are shared between many subscribers and should
              be started with start_link and subscribed with subscribe
            - others are attached to a producing process and have to be started
              with start, linked to the producer and subscribed with subscribe_link
            - maybe set this upon channel creation so subscribers only call
              subscribe()? (bad idea)

    - persistent register (register_link?), but one-way (no need to kill the registry)

    - prettification
        - behaviours for services
        - docs everywhere
        - better error handling in mesh.ex

- roadmap:
    - construct unified cache, remove unsafe calls from everywhere
    - api refactoring
    - prettify code
